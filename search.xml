<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[云起]]></title>
    <url>%2F2018%2F08%2F02%2F%E4%BA%91%E8%B5%B7-1%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[云起]]></title>
    <url>%2F2018%2F08%2F02%2F%E4%BA%91%E8%B5%B7%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[2018.7.20学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[php $GLOBALS 可以获得当前页面里的全部变量。 $_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。 $_FILES 获取上传文件的信息 $_GET URL (统一资源定位符 )方式传递数据 说明：其实就是浏览器的地址栏传递方式， 传递方式：URL 地址?参数 1=值 1&amp;参数 2=值2…………………………… 传递形式：表单的 get 方式和超链接方式 123456789101112&amp;lt?phpif (isset($_GET[&apos;name&apos;]) and isset($_GET[&apos;password&apos;])) &#123; if ($_GET[&apos;name&apos;] == $_GET[&apos;password&apos;]) echo &apos;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&apos;; else if (sha1($_GET[&apos;name&apos;]) === sha1($_GET[&apos;password&apos;])) die(&apos;Flag: &apos;.$flag); else echo &apos;&lt;p&gt;Invalid password.&lt;/p&gt;&apos;;&#125;else&#123; echo &apos;&lt;p&gt;Login first!&lt;/p&gt;&apos;;?&amp;gt; web试题 robots了解一下 这道题就是查找robots在网页的路径，在地址栏里域的根目录里后面加上robots.txt,即可查找robots，注意，robots.txt必须加到域的根目录后，不能加到子目录里。 正确加上：www.wechall.net/robots.txt 错误加上：www.wechall.net/challenge/training/www/robots/index.php/robots.txt加上之后运行，结果： 上述图片里的T0PS3CR3T就是答案。 php代码审计 根据题目，我们先查看一下源代码，发现了源代码中出现了这样一串php代码： 这串代码的意思是要往浏览器的地址栏里传递name和password，而`if ($_GET[‘name’] == $_GET[‘password’]) echo &apos;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&apos;; 这一句的意思是如果我们输入的name和password是相同的，则输出“Your password can not be your name!”，所以password和name的值不 相同； 而 else if (sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;])) die(&#39;Flag: &#39;.$flag); 这一句的意思是name和password的值在用哈西算法编码后值相等，然而每一个消息在经过哈希算法编码之后，都会得到 唯一的一一对应的消息摘要，所以只两消息值不相等，那么经过哈希算法后，得到的消息摘要一定不等；上面两句话结 合，仿佛是矛盾的，但是哈希算法有个漏洞，它不能用于数组，如果消息是数组，则会返回错误，所以如果name和 password的值是两个不同的数组，则它俩不等，然而经过sha1()函数后返回的值都是错误，则错误与错误相同，所以应 当在地址栏里加入？name[]=a&amp;password[]=b,则可以得到flag。 sha1()详细可见sha1函数 哈希算法详见安全哈希算法 $_GET：其实就是浏览器的地址栏传递方式， 传递方式：URL 地址?参数 1=值 1&amp;参数 2=值2……………………………]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.19学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-19%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[网站语言代码 en-gb 英语英国 en-US 英语美国 zh-cn 简体中文 zh-tw 繁体中文 html 基础 标题html中的标题是用h1、h2、h3、h4、h5、h6这些标签来定义的； 格式： &lt;h1&gt;这是一个标题&lt;/h1&gt; &lt;h2&gt;这是一个标题&lt;/h2&gt; &lt;h3&gt;这是一个标题&lt;/h3&gt; &lt;h4&gt;这是一个标题&lt;/h4&gt; &lt;h5&gt;这是一个标题&lt;/h5&gt; &lt;h6&gt;这是一个标题&lt;/h6&gt; 出来的结果： 这是一个标题这是一个标题这是一个标题这是一个标题这是一个标题 这是一个标题 段落html中的段落是用p标签来定义的； 格式： &lt;p&gt;易烊千玺&lt;/p&gt; 出来的结果是： 易烊千玺 链接 链接在html里是用a来定义的： 格式： 1&lt;a href=&quot;https://mp.csdn.net/mdeditor/81115180&quot;&gt;编辑文章&lt;/a&gt; 出来的结果： 编辑文章 补充：href属性是用来规定链接的目标，即这个链接的网址。 图片 html中的图片是img来定义的： 格式： 12&lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt; 结果是： 注意： src属性是用来引用该途径的路径。 图片的名称和尺寸要和图片的属性想同。 html的一些标签 html 定义html文档 格式： head所有头部元素的容器； 必须包含文档的标题（title），可以包含脚本、样式、meta 信息 以及其他更多的信息。 格式： meta：通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。 例如： title：定义在浏览器中工具栏、在搜索引擎结果中的页面、被添加到收藏夹时的标题(必须要有) base:为页面上的所有的相对链接规定默认 URL 或默认目标。]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.18学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-18%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[burp实现弱密码破解 先打开你的burpsuit，浏览器设置为代理服务器（代理：127.0.0.1，端口：8080） 在网上随意找到一个网站，随意输入账号和密码，点击登录 burp抓包成功后，鼠标右击，点击send to Intruder(发送到入侵者) 在Intruder—-Positions中，标记要攻击的位置，选择攻击模式 然后在Intruder—payloads(有效负载)中，选择每个攻击位置的有效负载(即添加字典) 最后点击(最上边一栏)Intruder—-start attack,即开始攻击 详细操作网址：https://jingyan.baidu.com/album/ca41422f054c881eae99eda0.html?picindex=2 burpsuit的四种攻击类型 Sniper（狙击手模式） 使用一组payload，一次只能用一个payload位置，即最后出来的结果中只会有一组payload，用完 字典里所有元素；如果标记了多个位置，则也只会出现一组payload，但里面会包含所有标记位置。 标记了一个位置： 标记了多个位置： Battering ram（攻城锤模式） 攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手 模式每次只能替换一个payload标记位置 Pitchfork（草叉模式） 使用多组payload集合，每个标记位置都可以使用不同的payload组，如果有两个位置A和B,则A1对应B1，A2对应B2……An对应Bn。 Cluster bomb（集束炸弹模式） 使用多组payload集合，与Pitchfork不同的是，如果有两个位置A和B，则A1对应B1…..Bn,A2对应B1……B2,……An对应B1…….Bn。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python---敏感词跳过]]></title>
    <url>%2F2018%2F08%2F01%2Fpython-%E6%95%8F%E6%84%9F%E8%AF%8D%E8%B7%B3%E8%BF%87%2F</url>
    <content type="text"><![CDATA[敏感词跳过题目：读取敏感词文本文件filter.txt,里面存在敏感词，当你输入一段话如果包含敏感字，则用*代替敏感字。 filter.txt文件 黑产，网马，暗链，挖矿 python代码import sys m = [] print(&quot;请输入一段话：&quot;) n = input() with open(&quot;filter.txt&quot;,&quot;r&quot;)as x : s = x.read() for i in s: if i == &quot;\n&quot; or i == &quot;，&quot;: pass else: m.append(i) for i in n: for j in m: s = 0 if i == j: print(&quot;*&quot;,end = &apos;&apos;) s += 1 break if s == 0: print(i,end = &apos;&apos;) 解题思路 看到这的题时，我们肯定是要把txt文件里的文字，与你输入的话里的字相比较，如果相同，则换掉，在此之前，我们要把逗号去掉。去掉逗号，先定义一个列表，把文件里的元素加入列表里，除了’,’和’/n’除外。 得到列表之后，把列表里的元素与输入的文字相比，相同的，换掉。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.17学习笔记]]></title>
    <url>%2F2018%2F07%2F31%2F2018-7-17%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[DVWA文件上传漏洞1. 使用Burpsuite: 先将木马的扩展名改成一个正常的扩展名，如jpg 上传时使用Burpsuite拦截数据包，将木马的扩展名改为原来的php,即可绕过客户端的验证。 例题： 做法 ： 点击浏览，选择一文件 打开浏览器设置，使用代理服务器，127.0.0.1 然后打开burpsuite，然后在浏览器里点击提交 burpsuite抓包后，改变文件的扩展名 在上图中的1中把文件的扩展名改为php，然后点击2的forward，把东西返给浏览器。 2. 白名单检测绕过 （白名单就是只只能上传规定后缀的文件，主要利用截断上传绕过，0x00截断与%00截断） 0x00截断是将上传文件名或路径名中使用ascii码值为0的字符（也就是null）来进行截断。多用在路径和文件名截断中； %00一般用在URL中用于截断url来进行文件包含，两者原理都一样，都是ascll为0的字符，只是形式不同而已； 在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束。利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00上传截断漏洞； 通过抓包截断将【evil.php.jpg】后面的一个【.】换成【0x00】。在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束，从而将【evil.php.jpg】 的内容写入到【evil.php】中，从而达到攻击的目的。 例题： 必须上传成后缀名为php的文件才可以： 和上题相同，选择一个文件 打开浏览器设置，使用代理服务器，127.0.0.1 然后打开burpsuite，然后在浏览器里点击提交 burpsuite抓包 在1处加上1.phpphp.jpg, 然后点击Hex，在横线的那一行，php后的ascii码值改为00） 返回Raw，检查上一步在Uplads后加1.phpphp.jpg中，第一个php后是否改变 然后把包返回给浏览器 Sqlmap下载、安装 Sqlmap安装教程网址：Sqlmap安装教程 安装Sqlmap 下载好的sqlmap，我们将下载的首先解压，然后将目录更改为SQLMap， 然后我们将SQLMap复制到Python的安装目录下，新建立一个cmd的快捷方式，并命名为叫“SQLMap”， 右键属性，这里需要修改2个地方，一个是“目标”，一个是“起始位置”， 双击刚才创建的快捷方式，测试下 如果出现下列： 注意： Python必须是python2，如果用户变量里没有python2，上述最后一步操作则不会成功； 需要将python2增加到变量里，打开高级系统变量的环境变量，在用户变量里的path里加上python2的路径，并把它置顶。 OWASP TOP 10注入 介绍简单来说,注入往往是应用程序缺少对输入进行安全性检查所引起的,攻击者把一些包含指令的数据发送给解释器,解释器会把收到的数据转换成指令执行。常见的注入包括SQL注入，OS Shell , LDAP , Xpath , Hibernate等等,而其中SQL注入尤为常见。这种攻击所造成的后果往往很大，一般整个数据库的信息都能被读取或篡改,通过SQL注入,攻击者甚至能前够获得更多的包括管理员的权限； 危害注入能导致数据丢失或数据破坏、缺乏可审计性或是拒绝服务。注入漏洞有时甚至能导致完全接管主机。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
