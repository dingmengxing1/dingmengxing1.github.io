<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018.7.21学习笔记]]></title>
    <url>%2F2018%2F08%2F09%2F2018-7-21%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[云·星 前几天做了几道ctf试题，为了可以以后复习，我把解题步骤写到CSDN博客上了，今天有些时间，我决定把它搬到自己搭建的博客上…… web试题解析1. md5加密 题目：123456789101112&lt;?php $md51 = md5(&apos;QNKCDZO&apos;); $a = @$_GET[&apos;a&apos;]; $md52 = @md5($a); if(isset($a))&#123; if ($a != &apos;QNKCDZO&apos; &amp;&amp; $md51 == $md52) &#123; echo &quot;nctf&#123;*****************&#125;&quot;; &#125; else &#123; echo &quot;false!!!&quot;; &#125;&#125; else&#123;echo &quot;please input a&quot;;&#125;?&gt; 解析：这道题由$_GET可知，是要向地址栏里添加a，由题知a不等于QNKCDZO，但是经过md5加密后的1和2要相等，而md51等于md5加密过的QNKCDZO，而md52等于md5加密过的a，即： md51=md52 md52=a md51=md5[QNKCDZO] 所以：md5a=md5[QNKCDZO]；但是，a!=QNKCDZO；这样看来，这道题是不可能的，但是我们查看一下百度，发现：md5(‘QNKCDZO’)=’0e830400451993494058024219903391’；然而，在php中==号为弱比较，’0e’开头剩下的全为数字不管数字是多少==恒成立，因为’0e***’==0，所以只要md5a的结果是以0e开头的字符串，就可以满足题目中的条件，所以寻找一个满足这样的字符串就可以了，找到对应a的值，把它添加到地址栏里，运行即可的结果。 知识链接： php md5()函数 php运算符 2.上传成功也不一定得到flag哦！！ 题目： 解析： 我们点开题目链接： 根据题目的提示我们决定看一下源代码： 在源代码中我们可以看到这样一串代码： 1234567891011121314&lt;script&gt; function check()&#123; var filename=document.getElementById(&quot;file&quot;); var str=filename.value.split(&quot;.&quot;); var ext=str[1]; if(ext===&apos;jpg&apos;)&#123; return true; &#125;else&#123; alert(&quot;请上传一张JPG格式的图片！&quot;); return false; &#125; return false; &#125; &lt;/script&gt; 从这串代码可知，把我们传上的图片名称分割成字符串数组，以“.”分割字符串，要求，数组[1]必须是jpg，即第一个“.”之后是jpg，所以我们只要保证上传的图片名称是以这种格式就可以，但不能直接是jpg格式的。 知识链接：JavaScript split() 方法 3.密码爆破 题目： 解析： 我们打开题目链接： 发现验证码只能使用一次，所以为了能够破解密码，我们需要绕过验证码，而我们所知道的绕过验证码的方式是验证码为空，即不输入验证码，我们抓包爆破密码： 由上图可知：vcode为验证码，现在验证码为空，我们已绕过验证码，开始破解密码： 鼠标右击，点击send to Intruder(发送到入侵者) 把密码添加为爆破，爆破模式选择sniper，然后点击payloads，插入字典，因为题目告诉密码为四位数字，所以可以直接在payloads type里选择numbers，选择从1000到9999，step则选择1： 最后点击(最上边一栏)Intruder—-start attack,即开始攻击： 通过Length来判断爆破是否成功，由图可知，其他的都是307，而有一个大的为331，所以这个应该是正确的，点击这一行，弹出的运行中，寻找flag：4./x00 题目：12345678if (isset ($_GET[&apos;nctf&apos;])) &#123; if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&apos;nctf&apos;]) === FALSE) echo &apos;必须输入数字才行&apos;; else if (strpos ($_GET[&apos;nctf&apos;], &apos;#biubiubiu&apos;) !== FALSE) die(&apos;Flag: &apos;.$flag); else echo &apos;骚年，继续努力吧啊~&apos;; &#125; 解析：题目里的$_GET是要想地址栏里传入数组nctf， 有第一个判断知道，nctf里必须是1-9的数字（即@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;nctf&#39;])返回值不等于false）， 而第二个判断则知#biubiubiu要在nctf里出现(即strpos ($_GET[&#39;nctf&#39;], &#39;#biubiubiu&#39;)的返回值不等于false，上述两者仿佛是矛盾的，但是我们可以运用%00 进行截断，所以在数字的后面加上%00，再加上#biubiubiu，而“#”这个字符在地址栏里输入的它URL编码之后的结果是%23，即可以输入nctf=11%00%23biubiubiu。 知识链接： 特殊字符为什么要进行url编码 URL中编码URL特殊字符]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑客榜中榜通关解析]]></title>
    <url>%2F2018%2F08%2F07%2F%E9%BB%91%E5%AE%A2%E6%A6%9C%E4%B8%AD%E6%A6%9C%E9%80%9A%E5%85%B3%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[云·星 今天做了一下黑客榜中榜的第一期，第一次接触这种游戏，挺好玩的，就把通关解析写了下来，以作纪念…… 第一关 随便输入几个字符，会“别灰心再试一次”，我们用F12查看源代码，会发现里面有一段ja代码： function PassConfirm() { var x=document.password.pass.value if (x==&quot;go &quot;) { alert(&quot;恭喜您，答对了，进入第二关！&quot;) window.open(&quot;2sdfadf.htm&quot;,&quot;_self&quot;) } else { alert(&quot;别灰心，再试一次!&quot;) window.open(&quot;error.asp&quot;,&quot;_self&quot;) } } 它说当x==”go “时，会出现”恭喜您，答对了，进入第二关！”，并进入“2sdfadf.htm”这个页面，所以我们可知x等于的值就是密码，输入就可以进入下一关，或者直接将“2sdfadf.htm”网址输入，也会直接进入下一关。 第二关 看到图片我们就要想到，把图片下载下来查看一下，但是当点击图片是，发现右击用不了，所以要把图片拉出来再下载，下载下来之后，我们用Notepad++打开，会看到： 你会发现下一关的网址：“下一关or3.htm”，所以你把网址“http://www.cn-hack.cn/qs/or3.htm” 输入，即可进入下一关。 第三关 这是URL编码，我们找一个在线解码器解码会得到下一关的网址：“http://www.cn-hack.cn/qs/4dfsa.htm ” 第四关 我们F12查看一下源代码，发现并没有什么东西，然后回来随便输入，页面会跳转，出现“你输入的用户名和密码错误！！ ”，在这个页面了我们在查看一下源代码，会看到: &lt;html&gt; &lt;head&gt; &lt;title&gt;checklogin&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 你输入的用户名和密码错误！！ &lt;!--第5关的地址是789.htm,恭喜过关！--&gt; &lt;/body&gt; &lt;/html&gt; 所以第五关的地址是：“ http://www.cn-hack.cn/qs/789.htm ” 第五关 它说密码是通用密码中的两个字母，那么我们知道sql的通用密码是’ or 1=’1，它说是两个字母，所以是or，我们输入，它会显示“祝贺你通关”。 知识链接:sql万能密码]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个python爬虫小程序]]></title>
    <url>%2F2018%2F08%2F07%2F%E4%B8%80%E4%B8%AApython%E7%88%AC%E8%99%AB%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[云·星 这几天一直在学爬虫，一直感觉不太理解，今天看了一道小题，自己做了出来，感觉很开心，记录下来…… 题目 网址:http://120.24.86.145:8002/qiumingshan/ 打开后出现： &gt; 亲请在2s内计算老司机的车速是多少 1161078706+780472638*1570389353-638524839+134952026-1770317881-547144653-2047462943-581822100*1149577687+1692914613=?; 发现没刷新一次都会有不同的数据出现，所以要想在两秒钟计算出来，我们需要些一个python脚本 第一步先把网页爬下来： import urllib.request from bs4 import BeautifulSoup page = urllib.request.urlopen(&apos;http://120.24.86.145:8002/qiumingshan/&apos;) 第二步读取网页源代码 ： html = page.read() 第三步找到我们想要的字符串： 先看一下网页源代码： &lt;head&gt; &lt;title&gt;下面的表达式的值是秋名山的车速&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;/head&gt; &lt;p&gt;亲请在2s内计算老司机的车速是多少&lt;/p&gt; &lt;div&gt;1161078706+780472638*1570389353-638524839+134952026-1770317881-547144653-2047462943-581822100*1149577687+1692914613=?;&lt;/div&gt; &lt;style&gt; div,p{ text-align: center; margin: 0 auto; } &lt;/style&gt; 我们发现我们要找的东西在div标签里，所以我们要获取div标签，并把它转化为字符串： soup = BeautifulSoup(html, &quot;html.parser&quot;) spans = str(soup.find(&apos;div&apos;)) 运行之后，我们发现它还不是我们要找到的，它的里面含有其它的字符: &lt;div&gt;2031286773+8947434+1253459624+2058437398+2083031208-294946053-1977124275*1753449552*1522247455+160588209+766176058=?;&lt;/div&gt; 所以我们要截取字符串： a = spans[:-9] b = a[5:] 找到我们想要的字符串后，计算就好了，因为这是一个字符串，所以，要用到eval()函数：print(eval(b)) 整个脚本合并： import urllib.request from bs4 import BeautifulSoup page = urllib.request.urlopen(&apos;http://120.24.86.145:8002/qiumingshan/&apos;) html = page.read() soup = BeautifulSoup(html, &quot;html.parser&quot;) spans = str(soup.find(&apos;div&apos;)) print(spans) a = spans[:-9] b = a[5:] print(eval(b)) 知识链接： 爬取网页 字符串截取 python爬虫：使用BeautifulSoup进行查找 Python eval() 函数]]></content>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云起]]></title>
    <url>%2F2018%2F08%2F02%2F%E4%BA%91%E8%B5%B7%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>置顶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.20学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[云·星 今天看了一些php的知识，并且做了两道web题（robots了解一下和php代码审计），我把我看到的和做题的思路写在这里，希望会对以后的自己有帮助…… php $GLOBALS 可以获得当前页面里的全部变量。 $_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。 $_FILES 获取上传文件的信息 $_GET URL (统一资源定位符 )方式传递数据 说明：其实就是浏览器的地址栏传递方式， 传递方式：URL 地址?参数 1=值 1&amp;参数 2=值2…………………………… 传递形式：表单的 get 方式和超链接方式 123456789101112&amp;lt?phpif (isset($_GET[&apos;name&apos;]) and isset($_GET[&apos;password&apos;])) &#123; if ($_GET[&apos;name&apos;] == $_GET[&apos;password&apos;]) echo &apos;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&apos;; else if (sha1($_GET[&apos;name&apos;]) === sha1($_GET[&apos;password&apos;])) die(&apos;Flag: &apos;.$flag); else echo &apos;&lt;p&gt;Invalid password.&lt;/p&gt;&apos;;&#125;else&#123; echo &apos;&lt;p&gt;Login first!&lt;/p&gt;&apos;;?&amp;gt; web试题 robots了解一下 这道题就是查找robots在网页的路径，在地址栏里域的根目录里后面加上robots.txt,即可查找robots，注意，robots.txt必须加到域的根目录后，不能加到子目录里。 正确加上：www.wechall.net/robots.txt 错误加上：www.wechall.net/challenge/training/www/robots/index.php/robots.txt加上之后运行，结果： 上述图片里的T0PS3CR3T就是答案。 php代码审计 根据题目，我们先查看一下源代码，发现了源代码中出现了这样一串php代码： 这串代码的意思是要往浏览器的地址栏里传递name和password，而`if ($_GET[‘name’] == $_GET[‘password’]) echo &apos;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&apos;; 这一句的意思是如果我们输入的name和password是相同的，则输出“Your password can not be your name!”，所以password和name的值不 相同； 而 else if (sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;])) die(&#39;Flag: &#39;.$flag); 这一句的意思是name和password的值在用哈西算法编码后值相等，然而每一个消息在经过哈希算法编码之后，都会得到 唯一的一一对应的消息摘要，所以只两消息值不相等，那么经过哈希算法后，得到的消息摘要一定不等；上面两句话结 合，仿佛是矛盾的，但是哈希算法有个漏洞，它不能用于数组，如果消息是数组，则会返回错误，所以如果name和 password的值是两个不同的数组，则它俩不等，然而经过sha1()函数后返回的值都是错误，则错误与错误相同，所以应 当在地址栏里加入？name[]=a&amp;password[]=b,则可以得到flag。 sha1()详细可见sha1函数 哈希算法详见安全哈希算法 $_GET：其实就是浏览器的地址栏传递方式， 传递方式：URL 地址?参数 1=值 1&amp;参数 2=值2……………………………]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.19学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-19%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[云·星 前两天做了道题用到了网站语言代码，就把几个常用的语言代码写了出来；今天看了一些html的知识，就写了一点，以便以后查阅…… 网站语言代码 en-gb 英语英国 en-US 英语美国 zh-cn 简体中文 zh-tw 繁体中文 html 基础 标题html中的标题是用h1、h2、h3、h4、h5、h6这些标签来定义的； 格式： &lt;h1&gt;这是一个标题&lt;/h1&gt; &lt;h2&gt;这是一个标题&lt;/h2&gt; &lt;h3&gt;这是一个标题&lt;/h3&gt; &lt;h4&gt;这是一个标题&lt;/h4&gt; &lt;h5&gt;这是一个标题&lt;/h5&gt; &lt;h6&gt;这是一个标题&lt;/h6&gt; 出来的结果： 这是一个标题这是一个标题这是一个标题这是一个标题这是一个标题 这是一个标题 段落html中的段落是用p标签来定义的； 格式： &lt;p&gt;易烊千玺&lt;/p&gt; 出来的结果是： 易烊千玺 链接 链接在html里是用a来定义的： 格式： 1&lt;a href=&quot;https://mp.csdn.net/mdeditor/81115180&quot;&gt;编辑文章&lt;/a&gt; 出来的结果： 编辑文章 补充：href属性是用来规定链接的目标，即这个链接的网址。 图片 html中的图片是img来定义的： 格式： 12&lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt; 结果是： 注意： src属性是用来引用该途径的路径。 图片的名称和尺寸要和图片的属性想同。 html的一些标签 html 定义html文档 格式： head所有头部元素的容器； 必须包含文档的标题（title），可以包含脚本、样式、meta 信息 以及其他更多的信息。 格式： meta：通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。 例如： title：定义在浏览器中工具栏、在搜索引擎结果中的页面、被添加到收藏夹时的标题(必须要有) base:为页面上的所有的相对链接规定默认 URL 或默认目标。]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.18学习笔记]]></title>
    <url>%2F2018%2F08%2F01%2F2018-7-18%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[云·星 burp弱密码破解是个挺好玩的的东西，今天学了之后感觉很开心，就把一些知识记了下来…… burp实现弱密码破解 先打开你的burpsuit，浏览器设置为代理服务器（代理：127.0.0.1，端口：8080） 在网上随意找到一个网站，随意输入账号和密码，点击登录 burp抓包成功后，鼠标右击，点击send to Intruder(发送到入侵者) 在Intruder—-Positions中，标记要攻击的位置，选择攻击模式 然后在Intruder—payloads(有效负载)中，选择每个攻击位置的有效负载(即添加字典) 最后点击(最上边一栏)Intruder—-start attack,即开始攻击 详细操作网址：https://jingyan.baidu.com/album/ca41422f054c881eae99eda0.html?picindex=2 burpsuit的四种攻击类型 Sniper（狙击手模式） 使用一组payload，一次只能用一个payload位置，即最后出来的结果中只会有一组payload，用完 字典里所有元素；如果标记了多个位置，则也只会出现一组payload，但里面会包含所有标记位置。 标记了一个位置： 标记了多个位置： Battering ram（攻城锤模式） 攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手 模式每次只能替换一个payload标记位置 Pitchfork（草叉模式） 使用多组payload集合，每个标记位置都可以使用不同的payload组，如果有两个位置A和B,则A1对应B1，A2对应B2……An对应Bn。 Cluster bomb（集束炸弹模式） 使用多组payload集合，与Pitchfork不同的是，如果有两个位置A和B，则A1对应B1…..Bn,A2对应B1……B2,……An对应B1…….Bn。]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python---敏感词跳过]]></title>
    <url>%2F2018%2F08%2F01%2Fpython-%E6%95%8F%E6%84%9F%E8%AF%8D%E8%B7%B3%E8%BF%87%2F</url>
    <content type="text"><![CDATA[云·星 今天看到了一道python题，敏感字跳过，做的时候感觉不太清楚，问了之后，谢了做题的步骤…… 敏感词跳过题目：读取敏感词文本文件filter.txt,里面存在敏感词，当你输入一段话如果包含敏感字，则用*代替敏感字。 filter.txt文件 黑产，网马，暗链，挖矿 python代码import sys m = [] print(&quot;请输入一段话：&quot;) n = input() with open(&quot;filter.txt&quot;,&quot;r&quot;)as x : s = x.read() for i in s: if i == &quot;\n&quot; or i == &quot;，&quot;: pass else: m.append(i) for i in n: for j in m: s = 0 if i == j: print(&quot;*&quot;,end = &apos;&apos;) s += 1 break if s == 0: print(i,end = &apos;&apos;) 解题思路 看到这的题时，我们肯定是要把txt文件里的文字，与你输入的话里的字相比较，如果相同，则换掉，在此之前，我们要把逗号去掉。去掉逗号，先定义一个列表，把文件里的元素加入列表里，除了’,’和’/n’除外。 得到列表之后，把列表里的元素与输入的文字相比，相同的，换掉。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.7.17学习笔记]]></title>
    <url>%2F2018%2F07%2F31%2F2018-7-17%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[云·星 文件上传漏洞是根据抓包进行的一种操作，最近看了一点关于它的知识，并且完成了Sqlmap下载、安装，也了解了一点注入，把自己的得到的一些写到这篇笔记里，希望对自己有帮助…… DVWA文件上传漏洞1. 使用Burpsuite: 先将木马的扩展名改成一个正常的扩展名，如jpg 上传时使用Burpsuite拦截数据包，将木马的扩展名改为原来的php,即可绕过客户端的验证。 例题： 做法 ： 点击浏览，选择一文件 打开浏览器设置，使用代理服务器，127.0.0.1 然后打开burpsuite，然后在浏览器里点击提交 burpsuite抓包后，改变文件的扩展名 在上图中的1中把文件的扩展名改为php，然后点击2的forward，把东西返给浏览器。 2. 白名单检测绕过 （白名单就是只只能上传规定后缀的文件，主要利用截断上传绕过，0x00截断与%00截断） 0x00截断是将上传文件名或路径名中使用ascii码值为0的字符（也就是null）来进行截断。多用在路径和文件名截断中； %00一般用在URL中用于截断url来进行文件包含，两者原理都一样，都是ascll为0的字符，只是形式不同而已； 在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束。利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00上传截断漏洞； 通过抓包截断将【evil.php.jpg】后面的一个【.】换成【0x00】。在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束，从而将【evil.php.jpg】 的内容写入到【evil.php】中，从而达到攻击的目的。 例题： 必须上传成后缀名为php的文件才可以： 和上题相同，选择一个文件 打开浏览器设置，使用代理服务器，127.0.0.1 然后打开burpsuite，然后在浏览器里点击提交 burpsuite抓包 在1处加上1.phpphp.jpg, 然后点击Hex，在横线的那一行，php后的ascii码值改为00） 返回Raw，检查上一步在Uplads后加1.phpphp.jpg中，第一个php后是否改变 然后把包返回给浏览器 Sqlmap下载、安装 Sqlmap安装教程网址：Sqlmap安装教程 安装Sqlmap 下载好的sqlmap，我们将下载的首先解压，然后将目录更改为SQLMap， 然后我们将SQLMap复制到Python的安装目录下，新建立一个cmd的快捷方式，并命名为叫“SQLMap”， 右键属性，这里需要修改2个地方，一个是“目标”，一个是“起始位置”， 双击刚才创建的快捷方式，测试下 如果出现下列： 注意： Python必须是python2，如果用户变量里没有python2，上述最后一步操作则不会成功； 需要将python2增加到变量里，打开高级系统变量的环境变量，在用户变量里的path里加上python2的路径，并把它置顶。 OWASP TOP 10注入 介绍简单来说,注入往往是应用程序缺少对输入进行安全性检查所引起的,攻击者把一些包含指令的数据发送给解释器,解释器会把收到的数据转换成指令执行。常见的注入包括SQL注入，OS Shell , LDAP , Xpath , Hibernate等等,而其中SQL注入尤为常见。这种攻击所造成的后果往往很大，一般整个数据库的信息都能被读取或篡改,通过SQL注入,攻击者甚至能前够获得更多的包括管理员的权限； 危害注入能导致数据丢失或数据破坏、缺乏可审计性或是拒绝服务。注入漏洞有时甚至能导致完全接管主机。]]></content>
      <tags>
        <tag>web笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
